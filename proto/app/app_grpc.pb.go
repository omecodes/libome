// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package apppb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ApplicationsClient is the client API for Applications service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApplicationsClient interface {
	SaveUserAttributeDefinitions(ctx context.Context, opts ...grpc.CallOption) (Applications_SaveUserAttributeDefinitionsClient, error)
	SaveApplicationAttributeDefinitions(ctx context.Context, opts ...grpc.CallOption) (Applications_SaveApplicationAttributeDefinitionsClient, error)
	RegisterApplication(ctx context.Context, in *RegisterApplicationRequest, opts ...grpc.CallOption) (*RegisterApplicationResponse, error)
	DeRegister(ctx context.Context, in *DeRegisterApplicationRequest, opts ...grpc.CallOption) (*DeRegisterApplicationResponse, error)
	ListApplications(ctx context.Context, in *ListApplicationsRequest, opts ...grpc.CallOption) (Applications_ListApplicationsClient, error)
	GetApplication(ctx context.Context, in *GetApplicationRequest, opts ...grpc.CallOption) (*GetApplicationResponse, error)
	SaveUserAttributeDefinition(ctx context.Context, in *SaveUserAttributeDefinitionRequest, opts ...grpc.CallOption) (*SaveUserAttributeDefinitionResponse, error)
	SaveApplicationAttributeDefinition(ctx context.Context, in *SaveApplicationAttributeDefinitionRequest, opts ...grpc.CallOption) (*SaveApplicationAttributeDefinitionResponse, error)
	GetUserAttributeDefinition(ctx context.Context, in *GetUserAttributeDefinitionRequest, opts ...grpc.CallOption) (*GetUserAttributeDefinitionResponse, error)
	GetApplicationAttributeDefinition(ctx context.Context, in *GetApplicationAttributeDefinitionRequest, opts ...grpc.CallOption) (*GetApplicationAttributeDefinitionResponse, error)
	ListUserAttributeDefinitions(ctx context.Context, in *ListUserAttributeDefinitionsRequest, opts ...grpc.CallOption) (Applications_ListUserAttributeDefinitionsClient, error)
	ListApplicationAttributeDefinitions(ctx context.Context, in *ListApplicationAttributeDefinitionsRequest, opts ...grpc.CallOption) (Applications_ListApplicationAttributeDefinitionsClient, error)
	DeleteUserAttributeDefinition(ctx context.Context, in *DeleteUserAttributeDefinitionRequest, opts ...grpc.CallOption) (*DeleteUserAttributeDefinitionResponse, error)
	DeleteApplicationAttributeDefinition(ctx context.Context, in *DeleteApplicationAttributeDefinitionRequest, opts ...grpc.CallOption) (*DeleteApplicationAttributeDefinitionResponse, error)
	AddAttributeTranslations(ctx context.Context, in *AddAttributeTranslationRequest, opts ...grpc.CallOption) (*AddAttributeTranslationResponse, error)
	CheckIfExists(ctx context.Context, in *CheckIfExistsRequest, opts ...grpc.CallOption) (*CheckIfExistsResponse, error)
	VerifyAuthenticationChallenge(ctx context.Context, in *VerifyAuthenticationChallengeRequest, opts ...grpc.CallOption) (*VerifyAuthenticationChallengeResponse, error)
}

type applicationsClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationsClient(cc grpc.ClientConnInterface) ApplicationsClient {
	return &applicationsClient{cc}
}

func (c *applicationsClient) SaveUserAttributeDefinitions(ctx context.Context, opts ...grpc.CallOption) (Applications_SaveUserAttributeDefinitionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Applications_serviceDesc.Streams[0], "/Applications/SaveUserAttributeDefinitions", opts...)
	if err != nil {
		return nil, err
	}
	x := &applicationsSaveUserAttributeDefinitionsClient{stream}
	return x, nil
}

type Applications_SaveUserAttributeDefinitionsClient interface {
	Send(*UserAttributeDefinition) error
	CloseAndRecv() (*SaveUserAttributeDefinitionResponse, error)
	grpc.ClientStream
}

type applicationsSaveUserAttributeDefinitionsClient struct {
	grpc.ClientStream
}

func (x *applicationsSaveUserAttributeDefinitionsClient) Send(m *UserAttributeDefinition) error {
	return x.ClientStream.SendMsg(m)
}

func (x *applicationsSaveUserAttributeDefinitionsClient) CloseAndRecv() (*SaveUserAttributeDefinitionResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SaveUserAttributeDefinitionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *applicationsClient) SaveApplicationAttributeDefinitions(ctx context.Context, opts ...grpc.CallOption) (Applications_SaveApplicationAttributeDefinitionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Applications_serviceDesc.Streams[1], "/Applications/SaveApplicationAttributeDefinitions", opts...)
	if err != nil {
		return nil, err
	}
	x := &applicationsSaveApplicationAttributeDefinitionsClient{stream}
	return x, nil
}

type Applications_SaveApplicationAttributeDefinitionsClient interface {
	Send(*ApplicationAttributeDefinition) error
	CloseAndRecv() (*SaveApplicationAttributeDefinitionResponse, error)
	grpc.ClientStream
}

type applicationsSaveApplicationAttributeDefinitionsClient struct {
	grpc.ClientStream
}

func (x *applicationsSaveApplicationAttributeDefinitionsClient) Send(m *ApplicationAttributeDefinition) error {
	return x.ClientStream.SendMsg(m)
}

func (x *applicationsSaveApplicationAttributeDefinitionsClient) CloseAndRecv() (*SaveApplicationAttributeDefinitionResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SaveApplicationAttributeDefinitionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *applicationsClient) RegisterApplication(ctx context.Context, in *RegisterApplicationRequest, opts ...grpc.CallOption) (*RegisterApplicationResponse, error) {
	out := new(RegisterApplicationResponse)
	err := c.cc.Invoke(ctx, "/Applications/RegisterApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) DeRegister(ctx context.Context, in *DeRegisterApplicationRequest, opts ...grpc.CallOption) (*DeRegisterApplicationResponse, error) {
	out := new(DeRegisterApplicationResponse)
	err := c.cc.Invoke(ctx, "/Applications/DeRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) ListApplications(ctx context.Context, in *ListApplicationsRequest, opts ...grpc.CallOption) (Applications_ListApplicationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Applications_serviceDesc.Streams[2], "/Applications/ListApplications", opts...)
	if err != nil {
		return nil, err
	}
	x := &applicationsListApplicationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Applications_ListApplicationsClient interface {
	Recv() (*Application, error)
	grpc.ClientStream
}

type applicationsListApplicationsClient struct {
	grpc.ClientStream
}

func (x *applicationsListApplicationsClient) Recv() (*Application, error) {
	m := new(Application)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *applicationsClient) GetApplication(ctx context.Context, in *GetApplicationRequest, opts ...grpc.CallOption) (*GetApplicationResponse, error) {
	out := new(GetApplicationResponse)
	err := c.cc.Invoke(ctx, "/Applications/GetApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) SaveUserAttributeDefinition(ctx context.Context, in *SaveUserAttributeDefinitionRequest, opts ...grpc.CallOption) (*SaveUserAttributeDefinitionResponse, error) {
	out := new(SaveUserAttributeDefinitionResponse)
	err := c.cc.Invoke(ctx, "/Applications/SaveUserAttributeDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) SaveApplicationAttributeDefinition(ctx context.Context, in *SaveApplicationAttributeDefinitionRequest, opts ...grpc.CallOption) (*SaveApplicationAttributeDefinitionResponse, error) {
	out := new(SaveApplicationAttributeDefinitionResponse)
	err := c.cc.Invoke(ctx, "/Applications/SaveApplicationAttributeDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) GetUserAttributeDefinition(ctx context.Context, in *GetUserAttributeDefinitionRequest, opts ...grpc.CallOption) (*GetUserAttributeDefinitionResponse, error) {
	out := new(GetUserAttributeDefinitionResponse)
	err := c.cc.Invoke(ctx, "/Applications/GetUserAttributeDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) GetApplicationAttributeDefinition(ctx context.Context, in *GetApplicationAttributeDefinitionRequest, opts ...grpc.CallOption) (*GetApplicationAttributeDefinitionResponse, error) {
	out := new(GetApplicationAttributeDefinitionResponse)
	err := c.cc.Invoke(ctx, "/Applications/GetApplicationAttributeDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) ListUserAttributeDefinitions(ctx context.Context, in *ListUserAttributeDefinitionsRequest, opts ...grpc.CallOption) (Applications_ListUserAttributeDefinitionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Applications_serviceDesc.Streams[3], "/Applications/ListUserAttributeDefinitions", opts...)
	if err != nil {
		return nil, err
	}
	x := &applicationsListUserAttributeDefinitionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Applications_ListUserAttributeDefinitionsClient interface {
	Recv() (*UserAttributeDefinition, error)
	grpc.ClientStream
}

type applicationsListUserAttributeDefinitionsClient struct {
	grpc.ClientStream
}

func (x *applicationsListUserAttributeDefinitionsClient) Recv() (*UserAttributeDefinition, error) {
	m := new(UserAttributeDefinition)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *applicationsClient) ListApplicationAttributeDefinitions(ctx context.Context, in *ListApplicationAttributeDefinitionsRequest, opts ...grpc.CallOption) (Applications_ListApplicationAttributeDefinitionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Applications_serviceDesc.Streams[4], "/Applications/ListApplicationAttributeDefinitions", opts...)
	if err != nil {
		return nil, err
	}
	x := &applicationsListApplicationAttributeDefinitionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Applications_ListApplicationAttributeDefinitionsClient interface {
	Recv() (*ApplicationAttributeDefinition, error)
	grpc.ClientStream
}

type applicationsListApplicationAttributeDefinitionsClient struct {
	grpc.ClientStream
}

func (x *applicationsListApplicationAttributeDefinitionsClient) Recv() (*ApplicationAttributeDefinition, error) {
	m := new(ApplicationAttributeDefinition)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *applicationsClient) DeleteUserAttributeDefinition(ctx context.Context, in *DeleteUserAttributeDefinitionRequest, opts ...grpc.CallOption) (*DeleteUserAttributeDefinitionResponse, error) {
	out := new(DeleteUserAttributeDefinitionResponse)
	err := c.cc.Invoke(ctx, "/Applications/DeleteUserAttributeDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) DeleteApplicationAttributeDefinition(ctx context.Context, in *DeleteApplicationAttributeDefinitionRequest, opts ...grpc.CallOption) (*DeleteApplicationAttributeDefinitionResponse, error) {
	out := new(DeleteApplicationAttributeDefinitionResponse)
	err := c.cc.Invoke(ctx, "/Applications/DeleteApplicationAttributeDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) AddAttributeTranslations(ctx context.Context, in *AddAttributeTranslationRequest, opts ...grpc.CallOption) (*AddAttributeTranslationResponse, error) {
	out := new(AddAttributeTranslationResponse)
	err := c.cc.Invoke(ctx, "/Applications/AddAttributeTranslations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) CheckIfExists(ctx context.Context, in *CheckIfExistsRequest, opts ...grpc.CallOption) (*CheckIfExistsResponse, error) {
	out := new(CheckIfExistsResponse)
	err := c.cc.Invoke(ctx, "/Applications/CheckIfExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) VerifyAuthenticationChallenge(ctx context.Context, in *VerifyAuthenticationChallengeRequest, opts ...grpc.CallOption) (*VerifyAuthenticationChallengeResponse, error) {
	out := new(VerifyAuthenticationChallengeResponse)
	err := c.cc.Invoke(ctx, "/Applications/VerifyAuthenticationChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationsServer is the server API for Applications service.
// All implementations must embed UnimplementedApplicationsServer
// for forward compatibility
type ApplicationsServer interface {
	SaveUserAttributeDefinitions(Applications_SaveUserAttributeDefinitionsServer) error
	SaveApplicationAttributeDefinitions(Applications_SaveApplicationAttributeDefinitionsServer) error
	RegisterApplication(context.Context, *RegisterApplicationRequest) (*RegisterApplicationResponse, error)
	DeRegister(context.Context, *DeRegisterApplicationRequest) (*DeRegisterApplicationResponse, error)
	ListApplications(*ListApplicationsRequest, Applications_ListApplicationsServer) error
	GetApplication(context.Context, *GetApplicationRequest) (*GetApplicationResponse, error)
	SaveUserAttributeDefinition(context.Context, *SaveUserAttributeDefinitionRequest) (*SaveUserAttributeDefinitionResponse, error)
	SaveApplicationAttributeDefinition(context.Context, *SaveApplicationAttributeDefinitionRequest) (*SaveApplicationAttributeDefinitionResponse, error)
	GetUserAttributeDefinition(context.Context, *GetUserAttributeDefinitionRequest) (*GetUserAttributeDefinitionResponse, error)
	GetApplicationAttributeDefinition(context.Context, *GetApplicationAttributeDefinitionRequest) (*GetApplicationAttributeDefinitionResponse, error)
	ListUserAttributeDefinitions(*ListUserAttributeDefinitionsRequest, Applications_ListUserAttributeDefinitionsServer) error
	ListApplicationAttributeDefinitions(*ListApplicationAttributeDefinitionsRequest, Applications_ListApplicationAttributeDefinitionsServer) error
	DeleteUserAttributeDefinition(context.Context, *DeleteUserAttributeDefinitionRequest) (*DeleteUserAttributeDefinitionResponse, error)
	DeleteApplicationAttributeDefinition(context.Context, *DeleteApplicationAttributeDefinitionRequest) (*DeleteApplicationAttributeDefinitionResponse, error)
	AddAttributeTranslations(context.Context, *AddAttributeTranslationRequest) (*AddAttributeTranslationResponse, error)
	CheckIfExists(context.Context, *CheckIfExistsRequest) (*CheckIfExistsResponse, error)
	VerifyAuthenticationChallenge(context.Context, *VerifyAuthenticationChallengeRequest) (*VerifyAuthenticationChallengeResponse, error)
	mustEmbedUnimplementedApplicationsServer()
}

// UnimplementedApplicationsServer must be embedded to have forward compatible implementations.
type UnimplementedApplicationsServer struct {
}

func (UnimplementedApplicationsServer) SaveUserAttributeDefinitions(Applications_SaveUserAttributeDefinitionsServer) error {
	return status.Errorf(codes.Unimplemented, "method SaveUserAttributeDefinitions not implemented")
}
func (UnimplementedApplicationsServer) SaveApplicationAttributeDefinitions(Applications_SaveApplicationAttributeDefinitionsServer) error {
	return status.Errorf(codes.Unimplemented, "method SaveApplicationAttributeDefinitions not implemented")
}
func (UnimplementedApplicationsServer) RegisterApplication(context.Context, *RegisterApplicationRequest) (*RegisterApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterApplication not implemented")
}
func (UnimplementedApplicationsServer) DeRegister(context.Context, *DeRegisterApplicationRequest) (*DeRegisterApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeRegister not implemented")
}
func (UnimplementedApplicationsServer) ListApplications(*ListApplicationsRequest, Applications_ListApplicationsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListApplications not implemented")
}
func (UnimplementedApplicationsServer) GetApplication(context.Context, *GetApplicationRequest) (*GetApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplication not implemented")
}
func (UnimplementedApplicationsServer) SaveUserAttributeDefinition(context.Context, *SaveUserAttributeDefinitionRequest) (*SaveUserAttributeDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUserAttributeDefinition not implemented")
}
func (UnimplementedApplicationsServer) SaveApplicationAttributeDefinition(context.Context, *SaveApplicationAttributeDefinitionRequest) (*SaveApplicationAttributeDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveApplicationAttributeDefinition not implemented")
}
func (UnimplementedApplicationsServer) GetUserAttributeDefinition(context.Context, *GetUserAttributeDefinitionRequest) (*GetUserAttributeDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAttributeDefinition not implemented")
}
func (UnimplementedApplicationsServer) GetApplicationAttributeDefinition(context.Context, *GetApplicationAttributeDefinitionRequest) (*GetApplicationAttributeDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationAttributeDefinition not implemented")
}
func (UnimplementedApplicationsServer) ListUserAttributeDefinitions(*ListUserAttributeDefinitionsRequest, Applications_ListUserAttributeDefinitionsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListUserAttributeDefinitions not implemented")
}
func (UnimplementedApplicationsServer) ListApplicationAttributeDefinitions(*ListApplicationAttributeDefinitionsRequest, Applications_ListApplicationAttributeDefinitionsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListApplicationAttributeDefinitions not implemented")
}
func (UnimplementedApplicationsServer) DeleteUserAttributeDefinition(context.Context, *DeleteUserAttributeDefinitionRequest) (*DeleteUserAttributeDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserAttributeDefinition not implemented")
}
func (UnimplementedApplicationsServer) DeleteApplicationAttributeDefinition(context.Context, *DeleteApplicationAttributeDefinitionRequest) (*DeleteApplicationAttributeDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApplicationAttributeDefinition not implemented")
}
func (UnimplementedApplicationsServer) AddAttributeTranslations(context.Context, *AddAttributeTranslationRequest) (*AddAttributeTranslationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAttributeTranslations not implemented")
}
func (UnimplementedApplicationsServer) CheckIfExists(context.Context, *CheckIfExistsRequest) (*CheckIfExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIfExists not implemented")
}
func (UnimplementedApplicationsServer) VerifyAuthenticationChallenge(context.Context, *VerifyAuthenticationChallengeRequest) (*VerifyAuthenticationChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAuthenticationChallenge not implemented")
}
func (UnimplementedApplicationsServer) mustEmbedUnimplementedApplicationsServer() {}

// UnsafeApplicationsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplicationsServer will
// result in compilation errors.
type UnsafeApplicationsServer interface {
	mustEmbedUnimplementedApplicationsServer()
}

func RegisterApplicationsServer(s grpc.ServiceRegistrar, srv ApplicationsServer) {
	s.RegisterService(&_Applications_serviceDesc, srv)
}

func _Applications_SaveUserAttributeDefinitions_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ApplicationsServer).SaveUserAttributeDefinitions(&applicationsSaveUserAttributeDefinitionsServer{stream})
}

type Applications_SaveUserAttributeDefinitionsServer interface {
	SendAndClose(*SaveUserAttributeDefinitionResponse) error
	Recv() (*UserAttributeDefinition, error)
	grpc.ServerStream
}

type applicationsSaveUserAttributeDefinitionsServer struct {
	grpc.ServerStream
}

func (x *applicationsSaveUserAttributeDefinitionsServer) SendAndClose(m *SaveUserAttributeDefinitionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *applicationsSaveUserAttributeDefinitionsServer) Recv() (*UserAttributeDefinition, error) {
	m := new(UserAttributeDefinition)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Applications_SaveApplicationAttributeDefinitions_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ApplicationsServer).SaveApplicationAttributeDefinitions(&applicationsSaveApplicationAttributeDefinitionsServer{stream})
}

type Applications_SaveApplicationAttributeDefinitionsServer interface {
	SendAndClose(*SaveApplicationAttributeDefinitionResponse) error
	Recv() (*ApplicationAttributeDefinition, error)
	grpc.ServerStream
}

type applicationsSaveApplicationAttributeDefinitionsServer struct {
	grpc.ServerStream
}

func (x *applicationsSaveApplicationAttributeDefinitionsServer) SendAndClose(m *SaveApplicationAttributeDefinitionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *applicationsSaveApplicationAttributeDefinitionsServer) Recv() (*ApplicationAttributeDefinition, error) {
	m := new(ApplicationAttributeDefinition)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Applications_RegisterApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).RegisterApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Applications/RegisterApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).RegisterApplication(ctx, req.(*RegisterApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_DeRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeRegisterApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).DeRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Applications/DeRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).DeRegister(ctx, req.(*DeRegisterApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_ListApplications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListApplicationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApplicationsServer).ListApplications(m, &applicationsListApplicationsServer{stream})
}

type Applications_ListApplicationsServer interface {
	Send(*Application) error
	grpc.ServerStream
}

type applicationsListApplicationsServer struct {
	grpc.ServerStream
}

func (x *applicationsListApplicationsServer) Send(m *Application) error {
	return x.ServerStream.SendMsg(m)
}

func _Applications_GetApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).GetApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Applications/GetApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).GetApplication(ctx, req.(*GetApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_SaveUserAttributeDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveUserAttributeDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).SaveUserAttributeDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Applications/SaveUserAttributeDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).SaveUserAttributeDefinition(ctx, req.(*SaveUserAttributeDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_SaveApplicationAttributeDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveApplicationAttributeDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).SaveApplicationAttributeDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Applications/SaveApplicationAttributeDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).SaveApplicationAttributeDefinition(ctx, req.(*SaveApplicationAttributeDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_GetUserAttributeDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAttributeDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).GetUserAttributeDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Applications/GetUserAttributeDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).GetUserAttributeDefinition(ctx, req.(*GetUserAttributeDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_GetApplicationAttributeDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationAttributeDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).GetApplicationAttributeDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Applications/GetApplicationAttributeDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).GetApplicationAttributeDefinition(ctx, req.(*GetApplicationAttributeDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_ListUserAttributeDefinitions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListUserAttributeDefinitionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApplicationsServer).ListUserAttributeDefinitions(m, &applicationsListUserAttributeDefinitionsServer{stream})
}

type Applications_ListUserAttributeDefinitionsServer interface {
	Send(*UserAttributeDefinition) error
	grpc.ServerStream
}

type applicationsListUserAttributeDefinitionsServer struct {
	grpc.ServerStream
}

func (x *applicationsListUserAttributeDefinitionsServer) Send(m *UserAttributeDefinition) error {
	return x.ServerStream.SendMsg(m)
}

func _Applications_ListApplicationAttributeDefinitions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListApplicationAttributeDefinitionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApplicationsServer).ListApplicationAttributeDefinitions(m, &applicationsListApplicationAttributeDefinitionsServer{stream})
}

type Applications_ListApplicationAttributeDefinitionsServer interface {
	Send(*ApplicationAttributeDefinition) error
	grpc.ServerStream
}

type applicationsListApplicationAttributeDefinitionsServer struct {
	grpc.ServerStream
}

func (x *applicationsListApplicationAttributeDefinitionsServer) Send(m *ApplicationAttributeDefinition) error {
	return x.ServerStream.SendMsg(m)
}

func _Applications_DeleteUserAttributeDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserAttributeDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).DeleteUserAttributeDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Applications/DeleteUserAttributeDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).DeleteUserAttributeDefinition(ctx, req.(*DeleteUserAttributeDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_DeleteApplicationAttributeDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApplicationAttributeDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).DeleteApplicationAttributeDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Applications/DeleteApplicationAttributeDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).DeleteApplicationAttributeDefinition(ctx, req.(*DeleteApplicationAttributeDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_AddAttributeTranslations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAttributeTranslationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).AddAttributeTranslations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Applications/AddAttributeTranslations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).AddAttributeTranslations(ctx, req.(*AddAttributeTranslationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_CheckIfExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIfExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).CheckIfExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Applications/CheckIfExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).CheckIfExists(ctx, req.(*CheckIfExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_VerifyAuthenticationChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyAuthenticationChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).VerifyAuthenticationChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Applications/VerifyAuthenticationChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).VerifyAuthenticationChallenge(ctx, req.(*VerifyAuthenticationChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Applications_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Applications",
	HandlerType: (*ApplicationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterApplication",
			Handler:    _Applications_RegisterApplication_Handler,
		},
		{
			MethodName: "DeRegister",
			Handler:    _Applications_DeRegister_Handler,
		},
		{
			MethodName: "GetApplication",
			Handler:    _Applications_GetApplication_Handler,
		},
		{
			MethodName: "SaveUserAttributeDefinition",
			Handler:    _Applications_SaveUserAttributeDefinition_Handler,
		},
		{
			MethodName: "SaveApplicationAttributeDefinition",
			Handler:    _Applications_SaveApplicationAttributeDefinition_Handler,
		},
		{
			MethodName: "GetUserAttributeDefinition",
			Handler:    _Applications_GetUserAttributeDefinition_Handler,
		},
		{
			MethodName: "GetApplicationAttributeDefinition",
			Handler:    _Applications_GetApplicationAttributeDefinition_Handler,
		},
		{
			MethodName: "DeleteUserAttributeDefinition",
			Handler:    _Applications_DeleteUserAttributeDefinition_Handler,
		},
		{
			MethodName: "DeleteApplicationAttributeDefinition",
			Handler:    _Applications_DeleteApplicationAttributeDefinition_Handler,
		},
		{
			MethodName: "AddAttributeTranslations",
			Handler:    _Applications_AddAttributeTranslations_Handler,
		},
		{
			MethodName: "CheckIfExists",
			Handler:    _Applications_CheckIfExists_Handler,
		},
		{
			MethodName: "VerifyAuthenticationChallenge",
			Handler:    _Applications_VerifyAuthenticationChallenge_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SaveUserAttributeDefinitions",
			Handler:       _Applications_SaveUserAttributeDefinitions_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SaveApplicationAttributeDefinitions",
			Handler:       _Applications_SaveApplicationAttributeDefinitions_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ListApplications",
			Handler:       _Applications_ListApplications_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListUserAttributeDefinitions",
			Handler:       _Applications_ListUserAttributeDefinitions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListApplicationAttributeDefinitions",
			Handler:       _Applications_ListApplicationAttributeDefinitions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "app.proto",
}

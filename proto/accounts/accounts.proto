syntax = "proto3";

package accountspb;

import "google/api/annotations.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";

message OauthCodeExchangeData {
    string user = 1 [(validator.field) = {msg_exists: true, length_gt: 0}];
    string client_id = 2 [(validator.field) = {msg_exists: true, length_gt: 0}];
    string scope = 3 [(validator.field) = {msg_exists: true, length_gt: 0}];
    string state = 4 [(validator.field) = {msg_exists: true, length_gt: 0}];
}

message UserEmailValidationData {
    string user = 1 [(validator.field) = {msg_exists: true, length_gt: 0}];
    string email = 2 [(validator.field) = {msg_exists: true, length_gt: 0}];
    int64 expiry = 3 [(validator.field) = {msg_exists: true, length_gt: 0}];
}

message ResetPasswordEmailData {
    string user = 1 [(validator.field) = {msg_exists: true, length_gt: 0}];
    int64 expiry = 2;
}

message Authorization {
    string user = 1 [(validator.field) = {msg_exists: true, length_gt: 0}];
    string application_id = 2 [(validator.field) = {msg_exists: true, length_gt: 0}];
    repeated string scope = 3 [(validator.field) = {msg_exists: true, length_gt: 0}];
    int64 duration = 4 [(validator.field) = {msg_exists: true, int_gt: 0}];
}

message Session {
    string id = 1 [(validator.field) = {msg_exists: true, length_gt: 0}];
    string user_agent = 2 [(validator.field) = {msg_exists: true, length_gt: 0}];
    string jwt = 3 [(validator.field) = {msg_exists: true, length_gt: 0}];
    int64 openedAt = 4;
}

message AccountValidationData {
    string user = 1 [(validator.field) = {msg_exists: true, length_gt: 0}];
    string email = 2 [(validator.field) = {msg_exists: true, length_gt: 0}];
    int64 expiry = 3;
}

message AccountInfo {
    string username = 1;
    string email = 2;
    bool email_confirmed = 3;
    int64 created_at = 6;
}

service Accounts {
    rpc FindAccount(FindAccountRequest) returns (FindAccountResponse) {
        option (google.api.http) = {
            post: "/api/account/match";
            body: "*";
        };
    };

    rpc CreateAccount (CreateAccountRequest) returns (CreateAccountResponse) {
        option (google.api.http) = {
            post: "/api/account/new";
            body: "*";
        };
    };

    rpc ValidateEmail(ValidateEmailRequest) returns (ValidateEmailResponse) {
        option(google.api.http).get = "/api/email/validate";
    };

    rpc RequestEmailValidation(RequestEmailValidationRequest) returns (RequestEmailValidationResponse) {
        option(google.api.http).get = "/api/email/request-validation";
    }

    rpc AccountInfo (AccountInfoRequest) returns (AccountInfoResponse) {
        option (google.api.http).get = "/api/account/info";
    };

    rpc SelectAccount (SelectAccountRequest) returns (SelectAccountResponse) {
        option(google.api.http).get = "/api/account/select";
    };

    rpc RequestPasswordReset(RequestPasswordResetRequest) returns (RequestPasswordResetResponse) {
        option(google.api.http).get = "/api/account/password/request-reset";
    };

    rpc UpdatePassword(UpdatePasswordRequest) returns (UpdatePasswordResponse) {
        option(google.api.http) = {
            post: "/api/account/password/update";
            body: "*";
        };
    };

    rpc Login (LoginRequest) returns (LoginResponse) {
        option (google.api.http) = {
            post: "/api/account/login";
            body: "*";
        };
    };

    rpc Logout (LogoutRequest) returns (LogoutResponse) {
        option (google.api.http).get = "/api/account/logout";
    };

    rpc ListsSession(ListSessionsRequest) returns (ListSessionsResponse) {
        option(google.api.http).get = "/api/account/sessions";
    };

    rpc CloseSession(CloseSessionRequest) returns (CloseSessionResponse) {
        option(google.api.http).delete = "/api/account/session/{session_id}";
    };

    rpc Authorize(AuthorizeRequest) returns (AuthorizeResponse) {
        option (google.api.http).get = "/authorize";
    };

    rpc GetToken(GetTokenRequest) returns (GetTokenResponse) {
        option (google.api.http) = {
            post: "/token";
            body: "*";
        };
    };
};

message FindAccountRequest {
    string username = 1;
    string email = 2;
}
message FindAccountResponse {
    bool username_exists = 1;
    bool email_exists = 2;
}

message CreateAccountRequest {
    string username = 1 [(validator.field) = {msg_exists: true, length_gt: 0}];
    string email = 2 [(validator.field) = {msg_exists : true, length_gt: 0}];
    string password = 3 [(validator.field) = {msg_exists : true, length_gt: 0}];
}
message CreateAccountResponse {
    bool username_exists = 1;
    bool email_exists = 2;
}

message ValidateEmailRequest {
    string code = 1;
}
message ValidateEmailResponse {}

message RequestEmailValidationRequest {
    string email = 1;
}
message RequestEmailValidationResponse {}

message AccountInfoRequest {
    string username = 1;
}
message AccountInfoResponse {
    AccountInfo info = 1;
}

message SelectAccountRequest {
    bool switch = 1;
}
message SelectAccountResponse {
    string redirect_url = 1;
}

message RequestPasswordResetRequest {
    string email = 1;
}
message RequestPasswordResetResponse {
    string redirect_url = 1;
}

message UpdatePasswordRequest {
    string new_password = 1;
    string password_confirm = 2;
}
message UpdatePasswordResponse {}

message LoginRequest {
    string user = 1 [(validator.field) = {msg_exists: true, length_gt: 0}];
    string password = 2 [(validator.field) = {msg_exists: true, length_gt: 0}];
}
message LoginResponse {
    string redirectURL = 1;
}

message LogoutRequest {}
message LogoutResponse {}

message ListSessionsRequest {}
message ListSessionsResponse {
    repeated Session sessions = 1;
}

message CloseSessionRequest {
    string session_id = 1 [(validator.field) = {msg_exists: true, length_gt: 0}];
}
message CloseSessionResponse {}

message AuthorizeRequest {
    string response_type = 1 [(validator.field) = {msg_exists: true, length_gt: 0}];
    string client_id = 2 [(validator.field) = {msg_exists: true, length_gt: 0}];
    string scope = 3 [(validator.field) = {msg_exists: true, length_gt: 0}];
    string state = 4 [(validator.field) = {msg_exists: true, length_gt: 0}];
    string redirect_uri = 5;
}
message AuthorizeResponse {
}

message GetTokenRequest {
    string grant_type = 1 [(validator.field) = {msg_exists: true, length_gt: 0}];
    string code = 2 [(validator.field) = {msg_exists: true, length_gt: 0}];
    string redirect_uri = 3;
    string code_verifier = 4;
    string username = 5;
    string password = 6;
    string refresh_token = 7;
}
message GetTokenResponse {
    string jwt = 1;
}
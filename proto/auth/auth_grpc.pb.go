// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package authpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TokenStoreServiceClient is the client API for TokenStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenStoreServiceClient interface {
	Sync(ctx context.Context, opts ...grpc.CallOption) (TokenStoreService_SyncClient, error)
	SaveJwt(ctx context.Context, in *SaveJwtRequest, opts ...grpc.CallOption) (*SaveJwtResponse, error)
	DeleteJwt(ctx context.Context, in *DeleteJwtRequest, opts ...grpc.CallOption) (*DeleteJwtResponse, error)
	GetJwtInfo(ctx context.Context, in *GetJwtInfoRequest, opts ...grpc.CallOption) (*GetJwtInfoResponse, error)
}

type tokenStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenStoreServiceClient(cc grpc.ClientConnInterface) TokenStoreServiceClient {
	return &tokenStoreServiceClient{cc}
}

func (c *tokenStoreServiceClient) Sync(ctx context.Context, opts ...grpc.CallOption) (TokenStoreService_SyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TokenStoreService_serviceDesc.Streams[0], "/TokenStoreService/Sync", opts...)
	if err != nil {
		return nil, err
	}
	x := &tokenStoreServiceSyncClient{stream}
	return x, nil
}

type TokenStoreService_SyncClient interface {
	Send(*SyncMessage) error
	Recv() (*SyncMessage, error)
	grpc.ClientStream
}

type tokenStoreServiceSyncClient struct {
	grpc.ClientStream
}

func (x *tokenStoreServiceSyncClient) Send(m *SyncMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tokenStoreServiceSyncClient) Recv() (*SyncMessage, error) {
	m := new(SyncMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tokenStoreServiceClient) SaveJwt(ctx context.Context, in *SaveJwtRequest, opts ...grpc.CallOption) (*SaveJwtResponse, error) {
	out := new(SaveJwtResponse)
	err := c.cc.Invoke(ctx, "/TokenStoreService/SaveJwt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenStoreServiceClient) DeleteJwt(ctx context.Context, in *DeleteJwtRequest, opts ...grpc.CallOption) (*DeleteJwtResponse, error) {
	out := new(DeleteJwtResponse)
	err := c.cc.Invoke(ctx, "/TokenStoreService/DeleteJwt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenStoreServiceClient) GetJwtInfo(ctx context.Context, in *GetJwtInfoRequest, opts ...grpc.CallOption) (*GetJwtInfoResponse, error) {
	out := new(GetJwtInfoResponse)
	err := c.cc.Invoke(ctx, "/TokenStoreService/GetJwtInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenStoreServiceServer is the server API for TokenStoreService service.
// All implementations must embed UnimplementedTokenStoreServiceServer
// for forward compatibility
type TokenStoreServiceServer interface {
	Sync(TokenStoreService_SyncServer) error
	SaveJwt(context.Context, *SaveJwtRequest) (*SaveJwtResponse, error)
	DeleteJwt(context.Context, *DeleteJwtRequest) (*DeleteJwtResponse, error)
	GetJwtInfo(context.Context, *GetJwtInfoRequest) (*GetJwtInfoResponse, error)
	mustEmbedUnimplementedTokenStoreServiceServer()
}

// UnimplementedTokenStoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTokenStoreServiceServer struct {
}

func (UnimplementedTokenStoreServiceServer) Sync(TokenStoreService_SyncServer) error {
	return status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedTokenStoreServiceServer) SaveJwt(context.Context, *SaveJwtRequest) (*SaveJwtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveJwt not implemented")
}
func (UnimplementedTokenStoreServiceServer) DeleteJwt(context.Context, *DeleteJwtRequest) (*DeleteJwtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJwt not implemented")
}
func (UnimplementedTokenStoreServiceServer) GetJwtInfo(context.Context, *GetJwtInfoRequest) (*GetJwtInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJwtInfo not implemented")
}
func (UnimplementedTokenStoreServiceServer) mustEmbedUnimplementedTokenStoreServiceServer() {}

// UnsafeTokenStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenStoreServiceServer will
// result in compilation errors.
type UnsafeTokenStoreServiceServer interface {
	mustEmbedUnimplementedTokenStoreServiceServer()
}

func RegisterTokenStoreServiceServer(s grpc.ServiceRegistrar, srv TokenStoreServiceServer) {
	s.RegisterService(&_TokenStoreService_serviceDesc, srv)
}

func _TokenStoreService_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TokenStoreServiceServer).Sync(&tokenStoreServiceSyncServer{stream})
}

type TokenStoreService_SyncServer interface {
	Send(*SyncMessage) error
	Recv() (*SyncMessage, error)
	grpc.ServerStream
}

type tokenStoreServiceSyncServer struct {
	grpc.ServerStream
}

func (x *tokenStoreServiceSyncServer) Send(m *SyncMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tokenStoreServiceSyncServer) Recv() (*SyncMessage, error) {
	m := new(SyncMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TokenStoreService_SaveJwt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveJwtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenStoreServiceServer).SaveJwt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TokenStoreService/SaveJwt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenStoreServiceServer).SaveJwt(ctx, req.(*SaveJwtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenStoreService_DeleteJwt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteJwtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenStoreServiceServer).DeleteJwt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TokenStoreService/DeleteJwt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenStoreServiceServer).DeleteJwt(ctx, req.(*DeleteJwtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenStoreService_GetJwtInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJwtInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenStoreServiceServer).GetJwtInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TokenStoreService/GetJwtInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenStoreServiceServer).GetJwtInfo(ctx, req.(*GetJwtInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TokenStoreService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TokenStoreService",
	HandlerType: (*TokenStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveJwt",
			Handler:    _TokenStoreService_SaveJwt_Handler,
		},
		{
			MethodName: "DeleteJwt",
			Handler:    _TokenStoreService_DeleteJwt_Handler,
		},
		{
			MethodName: "GetJwtInfo",
			Handler:    _TokenStoreService_GetJwtInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sync",
			Handler:       _TokenStoreService_Sync_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "auth.proto",
}

// AuthenticationServiceClient is the client API for AuthenticationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthenticationServiceClient interface {
	CreateCredentials(ctx context.Context, in *CreateCredentialsRequest, opts ...grpc.CallOption) (*CreateCredentialsResponse, error)
	UpdateEmail(ctx context.Context, in *UpdateEmailRequest, opts ...grpc.CallOption) (*UpdateEmailResponse, error)
	Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error)
	SetPassword(ctx context.Context, in *SetPasswordRequest, opts ...grpc.CallOption) (*SetPasswordResponse, error)
}

type authenticationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticationServiceClient(cc grpc.ClientConnInterface) AuthenticationServiceClient {
	return &authenticationServiceClient{cc}
}

func (c *authenticationServiceClient) CreateCredentials(ctx context.Context, in *CreateCredentialsRequest, opts ...grpc.CallOption) (*CreateCredentialsResponse, error) {
	out := new(CreateCredentialsResponse)
	err := c.cc.Invoke(ctx, "/AuthenticationService/CreateCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) UpdateEmail(ctx context.Context, in *UpdateEmailRequest, opts ...grpc.CallOption) (*UpdateEmailResponse, error) {
	out := new(UpdateEmailResponse)
	err := c.cc.Invoke(ctx, "/AuthenticationService/UpdateEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error) {
	out := new(AuthenticateResponse)
	err := c.cc.Invoke(ctx, "/AuthenticationService/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) SetPassword(ctx context.Context, in *SetPasswordRequest, opts ...grpc.CallOption) (*SetPasswordResponse, error) {
	out := new(SetPasswordResponse)
	err := c.cc.Invoke(ctx, "/AuthenticationService/SetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticationServiceServer is the server API for AuthenticationService service.
// All implementations must embed UnimplementedAuthenticationServiceServer
// for forward compatibility
type AuthenticationServiceServer interface {
	CreateCredentials(context.Context, *CreateCredentialsRequest) (*CreateCredentialsResponse, error)
	UpdateEmail(context.Context, *UpdateEmailRequest) (*UpdateEmailResponse, error)
	Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error)
	SetPassword(context.Context, *SetPasswordRequest) (*SetPasswordResponse, error)
	mustEmbedUnimplementedAuthenticationServiceServer()
}

// UnimplementedAuthenticationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthenticationServiceServer struct {
}

func (UnimplementedAuthenticationServiceServer) CreateCredentials(context.Context, *CreateCredentialsRequest) (*CreateCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCredentials not implemented")
}
func (UnimplementedAuthenticationServiceServer) UpdateEmail(context.Context, *UpdateEmailRequest) (*UpdateEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmail not implemented")
}
func (UnimplementedAuthenticationServiceServer) Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedAuthenticationServiceServer) SetPassword(context.Context, *SetPasswordRequest) (*SetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPassword not implemented")
}
func (UnimplementedAuthenticationServiceServer) mustEmbedUnimplementedAuthenticationServiceServer() {}

// UnsafeAuthenticationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenticationServiceServer will
// result in compilation errors.
type UnsafeAuthenticationServiceServer interface {
	mustEmbedUnimplementedAuthenticationServiceServer()
}

func RegisterAuthenticationServiceServer(s grpc.ServiceRegistrar, srv AuthenticationServiceServer) {
	s.RegisterService(&_AuthenticationService_serviceDesc, srv)
}

func _AuthenticationService_CreateCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).CreateCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthenticationService/CreateCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).CreateCredentials(ctx, req.(*CreateCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_UpdateEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).UpdateEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthenticationService/UpdateEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).UpdateEmail(ctx, req.(*UpdateEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthenticationService/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).Authenticate(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_SetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).SetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthenticationService/SetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).SetPassword(ctx, req.(*SetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthenticationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "AuthenticationService",
	HandlerType: (*AuthenticationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCredentials",
			Handler:    _AuthenticationService_CreateCredentials_Handler,
		},
		{
			MethodName: "UpdateEmail",
			Handler:    _AuthenticationService_UpdateEmail_Handler,
		},
		{
			MethodName: "Authenticate",
			Handler:    _AuthenticationService_Authenticate_Handler,
		},
		{
			MethodName: "SetPassword",
			Handler:    _AuthenticationService_SetPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CSRClient is the client API for CSR service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CSRClient interface {
	SignCertificate(ctx context.Context, in *SignCertificateRequest, opts ...grpc.CallOption) (*SignCertificateResponse, error)
}

type cSRClient struct {
	cc grpc.ClientConnInterface
}

func NewCSRClient(cc grpc.ClientConnInterface) CSRClient {
	return &cSRClient{cc}
}

func (c *cSRClient) SignCertificate(ctx context.Context, in *SignCertificateRequest, opts ...grpc.CallOption) (*SignCertificateResponse, error) {
	out := new(SignCertificateResponse)
	err := c.cc.Invoke(ctx, "/CSR/SignCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CSRServer is the server API for CSR service.
// All implementations must embed UnimplementedCSRServer
// for forward compatibility
type CSRServer interface {
	SignCertificate(context.Context, *SignCertificateRequest) (*SignCertificateResponse, error)
	mustEmbedUnimplementedCSRServer()
}

// UnimplementedCSRServer must be embedded to have forward compatible implementations.
type UnimplementedCSRServer struct {
}

func (UnimplementedCSRServer) SignCertificate(context.Context, *SignCertificateRequest) (*SignCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignCertificate not implemented")
}
func (UnimplementedCSRServer) mustEmbedUnimplementedCSRServer() {}

// UnsafeCSRServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CSRServer will
// result in compilation errors.
type UnsafeCSRServer interface {
	mustEmbedUnimplementedCSRServer()
}

func RegisterCSRServer(s grpc.ServiceRegistrar, srv CSRServer) {
	s.RegisterService(&_CSR_serviceDesc, srv)
}

func _CSR_SignCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSRServer).SignCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CSR/SignCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSRServer).SignCertificate(ctx, req.(*SignCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CSR_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CSR",
	HandlerType: (*CSRServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignCertificate",
			Handler:    _CSR_SignCertificate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ca.proto",
}

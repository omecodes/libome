syntax = "proto3";

package userspb;

import "google/api/annotations.proto";

enum GroupAbilities {
    None = 0;
    CanManageResourcesAccess = 1;
    CanCreateGroup = 2;
}

enum ResourceAccess {
    Denied = 0;
    Read = 1;
    Update = 2;
    Delete = 4;
    Share = 8;
    Default = 7;
    Admin = 15;
}

message User {
    string group_path = 1;
    string name = 2;
    uint32 role = 3;
    GroupAbilities capabilities = 4;
    ResourceAccess resources_access = 5;
}

message Group {
    string path = 1;
    string label = 2;
    string description = 3;
    int64 created_at = 4;
    string created_by = 5;
}

service UsersService {
    rpc CreateGroup (CreateGroupRequest) returns (CreateGroupResponse) {
        option(google.api.http) = {
            post: "/api/groups/new";
            body: "*";
        };
    };

    rpc GetGroup (GetGroupRequest) returns (GetGroupResponse) {
        option(google.api.http).get = "/api/groups/info/{group_path}";
    };

    rpc StreamSubGroups (StreamSubGroupsRequest) returns (stream Group);

    rpc ListSubGroup (ListSubGroupRequest) returns (ListSubGroupResponse) {
        option(google.api.http).get = "/api/group/subs/{group_path}";
    };

    rpc DeleteGroup (DeleteGroupRequest) returns (DeleteGroupResponse) {
        option(google.api.http).delete = "/api/groups/{group_path}";
    };

    rpc AddUser (AddUserRequest) returns (AddUserResponse) {
        option(google.api.http) = {
            post: "/api/users/new";
            body: "*";
        };
    };

    rpc MoveUser (MoveUserRequest) returns (MoveUserResponse) {
        option(google.api.http) = {
            post: "/api/users/{user.name}/move";
            body: "*";
        };
    };

    rpc GetUserStream (GetUserStreamRequest) returns (stream User);

    rpc ListUsers (ListUsersRequest) returns (ListUsersResponse) {
        option(google.api.http).get = "/api/users/list";
    };

    rpc DeleteUser (DeleteUserRequest) returns (DeleteUserResponse) {
        option(google.api.http).delete = "/api/users/{user.name}";
    };

    rpc DeleteUserSession (stream User) returns (stream User);

    rpc GetUserResourcesAccessPolicyInfo(GetUserResourcesAccessPolicyRequest) returns (GetUserResourcesAccessPolicyResponse) {
        option(google.api.http) = {
            post: "/api/resources/access/policy";
            body: "*";
        };
    };
}

message CreateGroupRequest {
    Group group = 1;
}
message CreateGroupResponse {}

message GetGroupRequest {
    string group_path = 1;
}
message GetGroupResponse {
    Group group = 1;
}

message StreamSubGroupsRequest {
    string group_path = 1;
}

message ListSubGroupRequest {
    string group_path = 1;
    uint32 offset = 2;
}
message ListSubGroupResponse {
    repeated Group groups = 1;
    uint32 offset = 2;
    uint32 total = 3;
}

message DeleteGroupRequest {
    string group_path = 1;
}
message DeleteGroupResponse {}

message AddUserRequest {
    User user = 1;
    GroupAbilities capabilities = 2;
}
message AddUserResponse {
}

message MoveUserRequest {
    User user = 1;
    string group_path = 2;
}
message MoveUserResponse {}

message GetUserStreamRequest {
    string group_path = 1;
}

message ListUsersRequest {
    string group_path = 1;
    uint32 offset = 2;
}
message ListUsersResponse {
    repeated User users = 1;
    uint32 offset = 2;
    uint32 total = 3;
}

message DeleteUserRequest {
    User user = 1;
}
message DeleteUserResponse {
}

message GetUserResourcesAccessPolicyRequest {
    string owner = 1;
}
message GetUserResourcesAccessPolicyResponse {
    int32 access = 1;
}
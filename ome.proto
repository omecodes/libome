syntax = "proto3";

import "annotations.proto";
option go_package = "github.com/omecodes/libome/ome.proto;ome";


enum FileType {
  Unknown = 0;
  File = 1;
  Directory = 2;
}

enum Scope {
  Public = 0;
  Personal = 1;
  ContextRestricted = 2;
}

enum Category {
  UnCategorized = 0;
  Education = 1;
  School = 2;
  Career = 3;
  Social = 4;
  Sports = 6;
  Music = 7;
  Photography = 8;
  Productivity = 9;
  Shopping = 10;
  Government = 11;
  News = 12;
  Press = 13;
  Books = 14;
  Finance = 15;
  Business = 16;
  Beauty = 17;
  Podcasts = 18;
  Health = 19;
  Medical = 20;
  Dating = 21;
  Communications = 22;
  Entertainment = 23;
  Food = 24;
  Lifestyle = 25;
  Video = 26;
}

enum OnDuplicateAction {
  Failure = 0;
  AutoRename = 1;
  Replace = 2;
}

enum Action {
  None = 0;
  Create = 1;
  Delete = 2;
  Move = 3;
  MoveEdit = 4;
  Rename = 5;
  RenameEdit = 6;
  Edit = 7;
  Read = 8;
  Share = 9;
  UnShare = 10;
  UpdateMeta = 11;
}

enum FileAction {
  NoAction = 0;
  ReadFile = 1;
  CreateFile = 2;
  DeleteFile = 4;
  MoveFile = 8;
}

enum Access {
  Denied = 0;
  CanRead = 1;
  CanUpdate = 2;
  CanDelete = 4;
  CanShare = 8;
  Full = 15;
}

enum ShareType {
  Restricted = 0;
  PublicLink = 1;
  UserShare = 2;
}

enum Protocol {
  Unsupported = 0;
  Grpc = 1;
  Http = 2;
}

enum Security {
  Insecure = 0;
  Tls = 1;
  Acme = 2;
  MutualTls = 3;
}

enum RegistryEventType {
  UnknownEvent = 0;
  Register = 1;
  DeRegister = 2;
  DeRegisterNode = 3;
  Update = 4;
}

enum ActionOnRegisterExistingService {
  ForceReplace = 0;
  UpdateExisting = 1;
  AddNodes = 2;
  RemoveOld = 4;
}

enum GroupAbilities {
  Unable = 0;
  CanManageResourcesAccess = 1;
  CanCreateGroup = 2;
}

// ***********************
//        Accounts
// ***********************

message OauthCodeExchangeData {
  string user = 1;
  string client_id = 2;
  string scope = 3;
  string state = 4;
}

message UserEmailValidationData {
  string user = 1;
  string email = 2;
  int64 expiry = 3;
}

message ResetPasswordEmailData {
  string user = 1;
  int64 expiry = 2;
}

message Authorization {
  string user = 1;
  string application_id = 2;
  repeated string scope = 3;
  int64 duration = 4;
}

message Session {
  string id = 1;
  string user_agent = 2;
  string jwt = 3;
  int64 openedAt = 4;
}

message AccountValidationData {
  string user = 1;
  string email = 2;
  int64 expiry = 3;
}

message AccountInfo {
  string username = 1;
  string email = 2;
  bool email_confirmed = 3;
  int64 created_at = 6;
}

message FindAccountRequest {
  string username = 1;
  string email = 2;
}
message FindAccountResponse {
  bool username_exists = 1;
  bool email_exists = 2;
}

message CreateAccountRequest {
  string username = 1;
  string email = 2;
  string password = 3;
}
message CreateAccountResponse {
  bool username_exists = 1;
  bool email_exists = 2;
}

message ValidateEmailRequest {
  string code = 1;
}
message ValidateEmailResponse {}

message RequestEmailValidationRequest {
  string email = 1;
}
message RequestEmailValidationResponse {}

message AccountInfoRequest {
  string username = 1;
}
message AccountInfoResponse {
  AccountInfo info = 1;
}

message SelectAccountRequest {
  bool switch = 1;
}
message SelectAccountResponse {
  string redirect_url = 1;
}

message RequestPasswordResetRequest {
  string email = 1;
}
message RequestPasswordResetResponse {
  string redirect_url = 1;
}

message UpdatePasswordRequest {
  string new_password = 1;
  string password_confirm = 2;
}
message UpdatePasswordResponse {}

message LoginRequest {
  string user = 1;
  string password = 2;
}
message LoginResponse {
  string redirectURL = 1;
}

message LogoutRequest {}
message LogoutResponse {}

message ListSessionsRequest {}
message ListSessionsResponse {
  repeated Session sessions = 1;
}

message CloseSessionRequest {
  string session_id = 1;
}
message CloseSessionResponse {}

message AuthorizeRequest {
  string response_type = 1;
  string client_id = 2;
  string scope = 3;
  string state = 4;
  string redirect_uri = 5;
}
message AuthorizeResponse {
}

message GetTokenRequest {
  string grant_type = 1;
  string code = 2 ;
  string redirect_uri = 3;
  string code_verifier = 4;
  string username = 5;
  string password = 6;
  string refresh_token = 7;
}
message GetTokenResponse {
  string jwt = 1;
}


// ***********************
//        Applications
// ***********************

enum ApplicationLevel {
  Root = 0;
  Master = 1;
  Internal = 2;
  External = 3;
}

enum FieldType {
  Other = 0;
  String = 1;
  StringList = 2;
  StringMap = 3;
  Text = 4;
  Number = 5;
  NumberMap = 6;
  FloatingNumber = 7;
  FloatingNumberMap = 8;
  Timestamp = 9;
  JsonEncoded = 10;
}

message Field {
  string name = 1;
  FieldType type = 2;
  string label = 3;
  string description = 4;
}

message AppInfo {
  string application_id = 1;
  string created_by = 2;
  int64 created_at = 3;
  string label = 4;
  string logo_url = 5;
  string description = 6;
  string website = 7;
}

message Application {
  string id = 1;
  bool activated = 2;
  string oauth_callback_url = 3;
  ApplicationLevel level = 4;
  repeated Category categories = 5;
  string secret = 6;
  AppInfo info = 7;
}

message RegisterApplicationRequest {
  Application application = 1;
}
message RegisterApplicationResponse{
  bool id_exists = 1;
}

message DeRegisterApplicationRequest{
  string application_id = 1;
}
message DeRegisterApplicationResponse{}

message ListApplicationsRequest{}
message ListApplicationsResponse{
  repeated Application applications = 1;
}

message GetApplicationRequest{
  string application_id = 1;
}
message GetApplicationResponse{
  Application application = 1;
}

message VerifyAuthenticationChallengeRequest {
  string application_id = 1;
  string nonce = 2;
  string challenge = 3;
}
message VerifyAuthenticationChallengeResponse {
  bool verified = 1;
}

message CheckIfExistsRequest {
  string application_id = 1;
}
message CheckIfExistsResponse {
  bool exists = 1;
}

service Applications {
  rpc RegisterApplication(RegisterApplicationRequest) returns (RegisterApplicationResponse) {
    option(google.api.http) = {
      put: "/api/application";
      body: "*";
    };
  };
  rpc DeRegister(DeRegisterApplicationRequest) returns (DeRegisterApplicationResponse) {
    option(google.api.http).delete = "/api/application/{application_id}";
  };
  rpc ListApplications(ListApplicationsRequest) returns (stream Application) {
    option(google.api.http).get = "/api/applications";
  };
  rpc GetApplication(GetApplicationRequest) returns (GetApplicationResponse) {
    option(google.api.http).get = "/api/application/{application_id}";
  };
  rpc CheckIfExists(CheckIfExistsRequest) returns (CheckIfExistsResponse);
  rpc VerifyAuthenticationChallenge(VerifyAuthenticationChallengeRequest) returns (VerifyAuthenticationChallengeResponse);
}

// ***********************
//        Auth
// ***********************
enum JWTState {
  Valid = 0;
  NotValid = 1;
  Expired = 2;
  Revoked = 3;
  NotSigned = 4;
  NotEffective = 5;
}

message JWTHeader {
  string typ = 1;
  string alg = 2;
  string kid = 3;
}

message Profile {
  bool verified = 1;
  string first_name = 2;
  string last_name = 3;
  string full_name = 4;
  string email = 5;
  string avatar_url = 6;
  string language = 7;
  int64 created_at = 8;
}

message Claims {
  string iss = 1;
  string sub = 2;
  string aud = 3;
  int64 exp = 4;
  int64 nbf = 5;
  int64 iat = 6;
  string jti = 7;

  TokenIntrospection token_introspection = 8;
  string scope = 9;
  Profile profile = 10;
  VerificationInfo verification_info = 11;
}

message VerificationInfo {
  string state_service = 1;
  string state_endpoint = 2;
  string key_url = 3;
}

message JWT {
  JWTHeader header = 1;
  Claims claims = 2;
  string signature = 3;
}

message TokenIntrospection {
  bool active = 1;
  string iss = 2;
  string aud = 3;
  int64 iat = 4;
  int64 exp = 5;
  string client_id = 6;
  string scope = 7;
  string sub = 8;
  string jti = 9;
}

// TokenStoreService token database service
service TokenStoreService {
  rpc Synchronize (stream JWTStateMessage) returns (stream JWTStateMessage);
  rpc SaveJwt(SaveJwtRequest) returns (SaveJwtResponse);
  rpc DeleteJwt (DeleteJwtRequest) returns (DeleteJwtResponse);
  rpc GetJwtInfo (GetJwtInfoRequest) returns (GetJwtInfoResponse) {
    option (google.api.http).get = "/jwt/{jti}/info";
  };
}

message JWTStateMessage {
  JWTState state = 1;
  string jti = 2;
  JwtInfo info = 3;
}
message JwtInfo {
  string iss = 1;
  string aud = 2;
  string jti = 3;
  int64 nbf = 4;
  int64 exp = 5;
  JWTState state = 6;
}

message GetJwtInfoRequest {
  string jti = 1;
  string signature = 2;
}
message GetJwtInfoResponse {
  JWTState state = 1;
}

message SaveJwtRequest {
  JwtInfo info = 1;
}
message SaveJwtResponse {}

message DeleteJwtRequest {
  string jti = 1;
}
message DeleteJwtResponse {}


// Authentication service
service AuthenticationService {
  rpc CreateCredentials (CreateCredentialsRequest) returns (CreateCredentialsResponse);
  rpc UpdateEmail (UpdateEmailRequest) returns (UpdateEmailResponse);
  rpc Authenticate (AuthenticateRequest) returns (AuthenticateResponse);
  rpc SetPassword (SetPasswordRequest) returns (SetPasswordResponse);
}

message CreateCredentialsRequest {
  string username = 1;
  string email = 2;
  string password = 3;
}
message CreateCredentialsResponse {
  bool user_taken = 1;
  bool email_taken = 2;
  string code = 3;
}

message UpdateEmailRequest {
  string username = 1;
  string old_email = 2;
  string new_email = 3;
}
message UpdateEmailResponse {}

message AuthenticateRequest {
  string subject = 1;
  string password = 2;
}
message AuthenticateResponse {
  bool success = 1;
}

message SetPasswordRequest {
  string user = 1;
  string email = 2;
  string old_password = 3;
  string new_password = 4;
}
message SetPasswordResponse {
  bool already_used = 1;
}

message CreateTokenRequest {
  string sub = 1;
  string audience = 2;
  repeated string scope = 3;
  map<string, string> scope_values = 4;
  map<string, string> data = 5;
}
message CreateTokenResponse {
  JWT jwt = 1;
}


// ***********************
//        Service
// ***********************
message CSRData {
  repeated string addresses = 1;
  repeated string domains = 2;
  bytes public_key = 3;
  string subject = 4;
}

message SignCertificateRequest {
  CSRData csr = 1;
}
message SignCertificateResponse {
  bytes raw_certificate = 1;
}

service CSR {
  rpc SignCertificate (SignCertificateRequest) returns (SignCertificateResponse) {
    option (google.api.http) = {
      post: "/cert/sign";
      body: "*";
    };
  };
}


message ConnectionInfo {
  Protocol protocol = 1;
  string address = 2;
  bytes Certificate = 3;
}

message Node {
  string id = 1;
  Protocol protocol = 2;
  string address = 3;
  Security security = 4;
  int64 ttl = 5;
  map<string, string> meta = 6;
}

message ServiceInfo {
  string id = 1;
  uint32 type = 2;
  string label = 3;
  repeated Node nodes = 4;
  map<string, string> meta = 5;
}

message RegistryEvent {
  RegistryEventType type = 1;
  string service_id = 2;
  ServiceInfo info = 3;
  ActionOnRegisterExistingService on_register_existing = 4;
}

message RegisterRequest {
  ServiceInfo service = 1;
  ActionOnRegisterExistingService action = 2;
}
message RegisterResponse {
  string registry_id = 1;
}

message DeregisterRequest {
  string registry_id = 1;
  repeated string nodes = 2;
}
message DeregisterResponse {}

message ListServicesRequest {
  string namespace = 1;
}
message ListServicesResponse {
  repeated ServiceInfo services = 1;
}

message GetRequest {
  string registry_id = 1;
}
message GetResponse {
  ServiceInfo info = 1;
}

message SearchRequest {
  string namespace = 1;
  uint32 type = 2;
}
message SearchResponse {
  repeated ServiceInfo services = 1;
}

service Registry {
  rpc Register(RegisterRequest) returns (RegisterResponse) {
    option(google.api.http) = {
      post: "/service/register";
      body: "*";
    };
  };
  rpc Deregister(DeregisterRequest)returns(DeregisterResponse){
    option(google.api.http).get = "/service/deregister/{registry_id}";
  };
  rpc List(ListServicesRequest)returns(ListServicesResponse){
    option(google.api.http).get = "/service/list";
  };
  rpc Get(GetRequest)returns(GetResponse){
    option(google.api.http).get = "/service/get/{registry_id}";
  };
  rpc Search(SearchRequest) returns (SearchResponse) {
    option(google.api.http).get = "/service/search";
  };
  rpc Listen(stream RegistryEvent) returns (stream RegistryEvent);
}
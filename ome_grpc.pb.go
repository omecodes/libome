// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ome

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ApplicationsClient is the client API for Applications service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApplicationsClient interface {
	RegisterApplication(ctx context.Context, in *RegisterApplicationRequest, opts ...grpc.CallOption) (*RegisterApplicationResponse, error)
	DeRegister(ctx context.Context, in *DeRegisterApplicationRequest, opts ...grpc.CallOption) (*DeRegisterApplicationResponse, error)
	ListApplications(ctx context.Context, in *ListApplicationsRequest, opts ...grpc.CallOption) (Applications_ListApplicationsClient, error)
	GetApplication(ctx context.Context, in *GetApplicationRequest, opts ...grpc.CallOption) (*GetApplicationResponse, error)
	CheckIfExists(ctx context.Context, in *CheckIfExistsRequest, opts ...grpc.CallOption) (*CheckIfExistsResponse, error)
	VerifyAuthenticationChallenge(ctx context.Context, in *VerifyAuthenticationChallengeRequest, opts ...grpc.CallOption) (*VerifyAuthenticationChallengeResponse, error)
}

type applicationsClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationsClient(cc grpc.ClientConnInterface) ApplicationsClient {
	return &applicationsClient{cc}
}

func (c *applicationsClient) RegisterApplication(ctx context.Context, in *RegisterApplicationRequest, opts ...grpc.CallOption) (*RegisterApplicationResponse, error) {
	out := new(RegisterApplicationResponse)
	err := c.cc.Invoke(ctx, "/Applications/RegisterApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) DeRegister(ctx context.Context, in *DeRegisterApplicationRequest, opts ...grpc.CallOption) (*DeRegisterApplicationResponse, error) {
	out := new(DeRegisterApplicationResponse)
	err := c.cc.Invoke(ctx, "/Applications/DeRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) ListApplications(ctx context.Context, in *ListApplicationsRequest, opts ...grpc.CallOption) (Applications_ListApplicationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Applications_serviceDesc.Streams[0], "/Applications/ListApplications", opts...)
	if err != nil {
		return nil, err
	}
	x := &applicationsListApplicationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Applications_ListApplicationsClient interface {
	Recv() (*Application, error)
	grpc.ClientStream
}

type applicationsListApplicationsClient struct {
	grpc.ClientStream
}

func (x *applicationsListApplicationsClient) Recv() (*Application, error) {
	m := new(Application)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *applicationsClient) GetApplication(ctx context.Context, in *GetApplicationRequest, opts ...grpc.CallOption) (*GetApplicationResponse, error) {
	out := new(GetApplicationResponse)
	err := c.cc.Invoke(ctx, "/Applications/GetApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) CheckIfExists(ctx context.Context, in *CheckIfExistsRequest, opts ...grpc.CallOption) (*CheckIfExistsResponse, error) {
	out := new(CheckIfExistsResponse)
	err := c.cc.Invoke(ctx, "/Applications/CheckIfExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) VerifyAuthenticationChallenge(ctx context.Context, in *VerifyAuthenticationChallengeRequest, opts ...grpc.CallOption) (*VerifyAuthenticationChallengeResponse, error) {
	out := new(VerifyAuthenticationChallengeResponse)
	err := c.cc.Invoke(ctx, "/Applications/VerifyAuthenticationChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationsServer is the server API for Applications service.
// All implementations must embed UnimplementedApplicationsServer
// for forward compatibility
type ApplicationsServer interface {
	RegisterApplication(context.Context, *RegisterApplicationRequest) (*RegisterApplicationResponse, error)
	DeRegister(context.Context, *DeRegisterApplicationRequest) (*DeRegisterApplicationResponse, error)
	ListApplications(*ListApplicationsRequest, Applications_ListApplicationsServer) error
	GetApplication(context.Context, *GetApplicationRequest) (*GetApplicationResponse, error)
	CheckIfExists(context.Context, *CheckIfExistsRequest) (*CheckIfExistsResponse, error)
	VerifyAuthenticationChallenge(context.Context, *VerifyAuthenticationChallengeRequest) (*VerifyAuthenticationChallengeResponse, error)
	mustEmbedUnimplementedApplicationsServer()
}

// UnimplementedApplicationsServer must be embedded to have forward compatible implementations.
type UnimplementedApplicationsServer struct {
}

func (UnimplementedApplicationsServer) RegisterApplication(context.Context, *RegisterApplicationRequest) (*RegisterApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterApplication not implemented")
}
func (UnimplementedApplicationsServer) DeRegister(context.Context, *DeRegisterApplicationRequest) (*DeRegisterApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeRegister not implemented")
}
func (UnimplementedApplicationsServer) ListApplications(*ListApplicationsRequest, Applications_ListApplicationsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListApplications not implemented")
}
func (UnimplementedApplicationsServer) GetApplication(context.Context, *GetApplicationRequest) (*GetApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplication not implemented")
}
func (UnimplementedApplicationsServer) CheckIfExists(context.Context, *CheckIfExistsRequest) (*CheckIfExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIfExists not implemented")
}
func (UnimplementedApplicationsServer) VerifyAuthenticationChallenge(context.Context, *VerifyAuthenticationChallengeRequest) (*VerifyAuthenticationChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAuthenticationChallenge not implemented")
}
func (UnimplementedApplicationsServer) mustEmbedUnimplementedApplicationsServer() {}

// UnsafeApplicationsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplicationsServer will
// result in compilation errors.
type UnsafeApplicationsServer interface {
	mustEmbedUnimplementedApplicationsServer()
}

func RegisterApplicationsServer(s grpc.ServiceRegistrar, srv ApplicationsServer) {
	s.RegisterService(&_Applications_serviceDesc, srv)
}

func _Applications_RegisterApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).RegisterApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Applications/RegisterApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).RegisterApplication(ctx, req.(*RegisterApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_DeRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeRegisterApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).DeRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Applications/DeRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).DeRegister(ctx, req.(*DeRegisterApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_ListApplications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListApplicationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApplicationsServer).ListApplications(m, &applicationsListApplicationsServer{stream})
}

type Applications_ListApplicationsServer interface {
	Send(*Application) error
	grpc.ServerStream
}

type applicationsListApplicationsServer struct {
	grpc.ServerStream
}

func (x *applicationsListApplicationsServer) Send(m *Application) error {
	return x.ServerStream.SendMsg(m)
}

func _Applications_GetApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).GetApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Applications/GetApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).GetApplication(ctx, req.(*GetApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_CheckIfExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIfExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).CheckIfExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Applications/CheckIfExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).CheckIfExists(ctx, req.(*CheckIfExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_VerifyAuthenticationChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyAuthenticationChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).VerifyAuthenticationChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Applications/VerifyAuthenticationChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).VerifyAuthenticationChallenge(ctx, req.(*VerifyAuthenticationChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Applications_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Applications",
	HandlerType: (*ApplicationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterApplication",
			Handler:    _Applications_RegisterApplication_Handler,
		},
		{
			MethodName: "DeRegister",
			Handler:    _Applications_DeRegister_Handler,
		},
		{
			MethodName: "GetApplication",
			Handler:    _Applications_GetApplication_Handler,
		},
		{
			MethodName: "CheckIfExists",
			Handler:    _Applications_CheckIfExists_Handler,
		},
		{
			MethodName: "VerifyAuthenticationChallenge",
			Handler:    _Applications_VerifyAuthenticationChallenge_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListApplications",
			Handler:       _Applications_ListApplications_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ome.proto",
}

// TokenStoreServiceClient is the client API for TokenStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenStoreServiceClient interface {
	Synchronize(ctx context.Context, opts ...grpc.CallOption) (TokenStoreService_SynchronizeClient, error)
	SaveJwt(ctx context.Context, in *SaveJwtRequest, opts ...grpc.CallOption) (*SaveJwtResponse, error)
	DeleteJwt(ctx context.Context, in *DeleteJwtRequest, opts ...grpc.CallOption) (*DeleteJwtResponse, error)
	GetJwtInfo(ctx context.Context, in *GetJwtInfoRequest, opts ...grpc.CallOption) (*GetJwtInfoResponse, error)
}

type tokenStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenStoreServiceClient(cc grpc.ClientConnInterface) TokenStoreServiceClient {
	return &tokenStoreServiceClient{cc}
}

func (c *tokenStoreServiceClient) Synchronize(ctx context.Context, opts ...grpc.CallOption) (TokenStoreService_SynchronizeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TokenStoreService_serviceDesc.Streams[0], "/TokenStoreService/Synchronize", opts...)
	if err != nil {
		return nil, err
	}
	x := &tokenStoreServiceSynchronizeClient{stream}
	return x, nil
}

type TokenStoreService_SynchronizeClient interface {
	Send(*JWTStateMessage) error
	Recv() (*JWTStateMessage, error)
	grpc.ClientStream
}

type tokenStoreServiceSynchronizeClient struct {
	grpc.ClientStream
}

func (x *tokenStoreServiceSynchronizeClient) Send(m *JWTStateMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tokenStoreServiceSynchronizeClient) Recv() (*JWTStateMessage, error) {
	m := new(JWTStateMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tokenStoreServiceClient) SaveJwt(ctx context.Context, in *SaveJwtRequest, opts ...grpc.CallOption) (*SaveJwtResponse, error) {
	out := new(SaveJwtResponse)
	err := c.cc.Invoke(ctx, "/TokenStoreService/SaveJwt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenStoreServiceClient) DeleteJwt(ctx context.Context, in *DeleteJwtRequest, opts ...grpc.CallOption) (*DeleteJwtResponse, error) {
	out := new(DeleteJwtResponse)
	err := c.cc.Invoke(ctx, "/TokenStoreService/DeleteJwt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenStoreServiceClient) GetJwtInfo(ctx context.Context, in *GetJwtInfoRequest, opts ...grpc.CallOption) (*GetJwtInfoResponse, error) {
	out := new(GetJwtInfoResponse)
	err := c.cc.Invoke(ctx, "/TokenStoreService/GetJwtInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenStoreServiceServer is the server API for TokenStoreService service.
// All implementations must embed UnimplementedTokenStoreServiceServer
// for forward compatibility
type TokenStoreServiceServer interface {
	Synchronize(TokenStoreService_SynchronizeServer) error
	SaveJwt(context.Context, *SaveJwtRequest) (*SaveJwtResponse, error)
	DeleteJwt(context.Context, *DeleteJwtRequest) (*DeleteJwtResponse, error)
	GetJwtInfo(context.Context, *GetJwtInfoRequest) (*GetJwtInfoResponse, error)
	mustEmbedUnimplementedTokenStoreServiceServer()
}

// UnimplementedTokenStoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTokenStoreServiceServer struct {
}

func (UnimplementedTokenStoreServiceServer) Synchronize(TokenStoreService_SynchronizeServer) error {
	return status.Errorf(codes.Unimplemented, "method Synchronize not implemented")
}
func (UnimplementedTokenStoreServiceServer) SaveJwt(context.Context, *SaveJwtRequest) (*SaveJwtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveJwt not implemented")
}
func (UnimplementedTokenStoreServiceServer) DeleteJwt(context.Context, *DeleteJwtRequest) (*DeleteJwtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJwt not implemented")
}
func (UnimplementedTokenStoreServiceServer) GetJwtInfo(context.Context, *GetJwtInfoRequest) (*GetJwtInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJwtInfo not implemented")
}
func (UnimplementedTokenStoreServiceServer) mustEmbedUnimplementedTokenStoreServiceServer() {}

// UnsafeTokenStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenStoreServiceServer will
// result in compilation errors.
type UnsafeTokenStoreServiceServer interface {
	mustEmbedUnimplementedTokenStoreServiceServer()
}

func RegisterTokenStoreServiceServer(s grpc.ServiceRegistrar, srv TokenStoreServiceServer) {
	s.RegisterService(&_TokenStoreService_serviceDesc, srv)
}

func _TokenStoreService_Synchronize_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TokenStoreServiceServer).Synchronize(&tokenStoreServiceSynchronizeServer{stream})
}

type TokenStoreService_SynchronizeServer interface {
	Send(*JWTStateMessage) error
	Recv() (*JWTStateMessage, error)
	grpc.ServerStream
}

type tokenStoreServiceSynchronizeServer struct {
	grpc.ServerStream
}

func (x *tokenStoreServiceSynchronizeServer) Send(m *JWTStateMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tokenStoreServiceSynchronizeServer) Recv() (*JWTStateMessage, error) {
	m := new(JWTStateMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TokenStoreService_SaveJwt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveJwtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenStoreServiceServer).SaveJwt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TokenStoreService/SaveJwt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenStoreServiceServer).SaveJwt(ctx, req.(*SaveJwtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenStoreService_DeleteJwt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteJwtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenStoreServiceServer).DeleteJwt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TokenStoreService/DeleteJwt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenStoreServiceServer).DeleteJwt(ctx, req.(*DeleteJwtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenStoreService_GetJwtInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJwtInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenStoreServiceServer).GetJwtInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TokenStoreService/GetJwtInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenStoreServiceServer).GetJwtInfo(ctx, req.(*GetJwtInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TokenStoreService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TokenStoreService",
	HandlerType: (*TokenStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveJwt",
			Handler:    _TokenStoreService_SaveJwt_Handler,
		},
		{
			MethodName: "DeleteJwt",
			Handler:    _TokenStoreService_DeleteJwt_Handler,
		},
		{
			MethodName: "GetJwtInfo",
			Handler:    _TokenStoreService_GetJwtInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Synchronize",
			Handler:       _TokenStoreService_Synchronize_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ome.proto",
}

// AuthenticationServiceClient is the client API for AuthenticationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthenticationServiceClient interface {
	CreateCredentials(ctx context.Context, in *CreateCredentialsRequest, opts ...grpc.CallOption) (*CreateCredentialsResponse, error)
	UpdateEmail(ctx context.Context, in *UpdateEmailRequest, opts ...grpc.CallOption) (*UpdateEmailResponse, error)
	Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error)
	SetPassword(ctx context.Context, in *SetPasswordRequest, opts ...grpc.CallOption) (*SetPasswordResponse, error)
}

type authenticationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticationServiceClient(cc grpc.ClientConnInterface) AuthenticationServiceClient {
	return &authenticationServiceClient{cc}
}

func (c *authenticationServiceClient) CreateCredentials(ctx context.Context, in *CreateCredentialsRequest, opts ...grpc.CallOption) (*CreateCredentialsResponse, error) {
	out := new(CreateCredentialsResponse)
	err := c.cc.Invoke(ctx, "/AuthenticationService/CreateCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) UpdateEmail(ctx context.Context, in *UpdateEmailRequest, opts ...grpc.CallOption) (*UpdateEmailResponse, error) {
	out := new(UpdateEmailResponse)
	err := c.cc.Invoke(ctx, "/AuthenticationService/UpdateEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error) {
	out := new(AuthenticateResponse)
	err := c.cc.Invoke(ctx, "/AuthenticationService/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) SetPassword(ctx context.Context, in *SetPasswordRequest, opts ...grpc.CallOption) (*SetPasswordResponse, error) {
	out := new(SetPasswordResponse)
	err := c.cc.Invoke(ctx, "/AuthenticationService/SetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticationServiceServer is the server API for AuthenticationService service.
// All implementations must embed UnimplementedAuthenticationServiceServer
// for forward compatibility
type AuthenticationServiceServer interface {
	CreateCredentials(context.Context, *CreateCredentialsRequest) (*CreateCredentialsResponse, error)
	UpdateEmail(context.Context, *UpdateEmailRequest) (*UpdateEmailResponse, error)
	Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error)
	SetPassword(context.Context, *SetPasswordRequest) (*SetPasswordResponse, error)
	mustEmbedUnimplementedAuthenticationServiceServer()
}

// UnimplementedAuthenticationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthenticationServiceServer struct {
}

func (UnimplementedAuthenticationServiceServer) CreateCredentials(context.Context, *CreateCredentialsRequest) (*CreateCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCredentials not implemented")
}
func (UnimplementedAuthenticationServiceServer) UpdateEmail(context.Context, *UpdateEmailRequest) (*UpdateEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmail not implemented")
}
func (UnimplementedAuthenticationServiceServer) Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedAuthenticationServiceServer) SetPassword(context.Context, *SetPasswordRequest) (*SetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPassword not implemented")
}
func (UnimplementedAuthenticationServiceServer) mustEmbedUnimplementedAuthenticationServiceServer() {}

// UnsafeAuthenticationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenticationServiceServer will
// result in compilation errors.
type UnsafeAuthenticationServiceServer interface {
	mustEmbedUnimplementedAuthenticationServiceServer()
}

func RegisterAuthenticationServiceServer(s grpc.ServiceRegistrar, srv AuthenticationServiceServer) {
	s.RegisterService(&_AuthenticationService_serviceDesc, srv)
}

func _AuthenticationService_CreateCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).CreateCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthenticationService/CreateCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).CreateCredentials(ctx, req.(*CreateCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_UpdateEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).UpdateEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthenticationService/UpdateEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).UpdateEmail(ctx, req.(*UpdateEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthenticationService/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).Authenticate(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_SetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).SetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthenticationService/SetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).SetPassword(ctx, req.(*SetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthenticationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "AuthenticationService",
	HandlerType: (*AuthenticationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCredentials",
			Handler:    _AuthenticationService_CreateCredentials_Handler,
		},
		{
			MethodName: "UpdateEmail",
			Handler:    _AuthenticationService_UpdateEmail_Handler,
		},
		{
			MethodName: "Authenticate",
			Handler:    _AuthenticationService_Authenticate_Handler,
		},
		{
			MethodName: "SetPassword",
			Handler:    _AuthenticationService_SetPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ome.proto",
}

// FilesClient is the client API for Files service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilesClient interface {
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	GetListStream(ctx context.Context, in *GetListStreamRequest, opts ...grpc.CallOption) (Files_GetListStreamClient, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	GetStats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsResponse, error)
	StatsSession(ctx context.Context, opts ...grpc.CallOption) (Files_StatsSessionClient, error)
	GetMeta(ctx context.Context, in *GetMetaRequest, opts ...grpc.CallOption) (*GetMetaResponse, error)
	SetMeta(ctx context.Context, in *SetMetaRequest, opts ...grpc.CallOption) (*SetMetaResponse, error)
	DownloadURL(ctx context.Context, in *DownloadURLRequest, opts ...grpc.CallOption) (*DownloadURLResponse, error)
	UploadURL(ctx context.Context, in *UploadURLRequest, opts ...grpc.CallOption) (*UploadURLResponse, error)
	Copy(ctx context.Context, in *CopyRequest, opts ...grpc.CallOption) (*CopyResponse, error)
	Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type filesClient struct {
	cc grpc.ClientConnInterface
}

func NewFilesClient(cc grpc.ClientConnInterface) FilesClient {
	return &filesClient{cc}
}

func (c *filesClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/Files/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) GetListStream(ctx context.Context, in *GetListStreamRequest, opts ...grpc.CallOption) (Files_GetListStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Files_serviceDesc.Streams[0], "/Files/GetListStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &filesGetListStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Files_GetListStreamClient interface {
	Recv() (*Stats, error)
	grpc.ClientStream
}

type filesGetListStreamClient struct {
	grpc.ClientStream
}

func (x *filesGetListStreamClient) Recv() (*Stats, error) {
	m := new(Stats)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *filesClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/Files/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) GetStats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsResponse, error) {
	out := new(StatsResponse)
	err := c.cc.Invoke(ctx, "/Files/GetStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) StatsSession(ctx context.Context, opts ...grpc.CallOption) (Files_StatsSessionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Files_serviceDesc.Streams[1], "/Files/StatsSession", opts...)
	if err != nil {
		return nil, err
	}
	x := &filesStatsSessionClient{stream}
	return x, nil
}

type Files_StatsSessionClient interface {
	Send(*StatsRequest) error
	Recv() (*Stats, error)
	grpc.ClientStream
}

type filesStatsSessionClient struct {
	grpc.ClientStream
}

func (x *filesStatsSessionClient) Send(m *StatsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *filesStatsSessionClient) Recv() (*Stats, error) {
	m := new(Stats)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *filesClient) GetMeta(ctx context.Context, in *GetMetaRequest, opts ...grpc.CallOption) (*GetMetaResponse, error) {
	out := new(GetMetaResponse)
	err := c.cc.Invoke(ctx, "/Files/GetMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) SetMeta(ctx context.Context, in *SetMetaRequest, opts ...grpc.CallOption) (*SetMetaResponse, error) {
	out := new(SetMetaResponse)
	err := c.cc.Invoke(ctx, "/Files/SetMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) DownloadURL(ctx context.Context, in *DownloadURLRequest, opts ...grpc.CallOption) (*DownloadURLResponse, error) {
	out := new(DownloadURLResponse)
	err := c.cc.Invoke(ctx, "/Files/DownloadURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) UploadURL(ctx context.Context, in *UploadURLRequest, opts ...grpc.CallOption) (*UploadURLResponse, error) {
	out := new(UploadURLResponse)
	err := c.cc.Invoke(ctx, "/Files/UploadURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) Copy(ctx context.Context, in *CopyRequest, opts ...grpc.CallOption) (*CopyResponse, error) {
	out := new(CopyResponse)
	err := c.cc.Invoke(ctx, "/Files/Copy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error) {
	out := new(MoveResponse)
	err := c.cc.Invoke(ctx, "/Files/Move", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/Files/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilesServer is the server API for Files service.
// All implementations must embed UnimplementedFilesServer
// for forward compatibility
type FilesServer interface {
	List(context.Context, *ListRequest) (*ListResponse, error)
	GetListStream(*GetListStreamRequest, Files_GetListStreamServer) error
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	GetStats(context.Context, *StatsRequest) (*StatsResponse, error)
	StatsSession(Files_StatsSessionServer) error
	GetMeta(context.Context, *GetMetaRequest) (*GetMetaResponse, error)
	SetMeta(context.Context, *SetMetaRequest) (*SetMetaResponse, error)
	DownloadURL(context.Context, *DownloadURLRequest) (*DownloadURLResponse, error)
	UploadURL(context.Context, *UploadURLRequest) (*UploadURLResponse, error)
	Copy(context.Context, *CopyRequest) (*CopyResponse, error)
	Move(context.Context, *MoveRequest) (*MoveResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedFilesServer()
}

// UnimplementedFilesServer must be embedded to have forward compatible implementations.
type UnimplementedFilesServer struct {
}

func (UnimplementedFilesServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedFilesServer) GetListStream(*GetListStreamRequest, Files_GetListStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetListStream not implemented")
}
func (UnimplementedFilesServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedFilesServer) GetStats(context.Context, *StatsRequest) (*StatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedFilesServer) StatsSession(Files_StatsSessionServer) error {
	return status.Errorf(codes.Unimplemented, "method StatsSession not implemented")
}
func (UnimplementedFilesServer) GetMeta(context.Context, *GetMetaRequest) (*GetMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (UnimplementedFilesServer) SetMeta(context.Context, *SetMetaRequest) (*SetMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMeta not implemented")
}
func (UnimplementedFilesServer) DownloadURL(context.Context, *DownloadURLRequest) (*DownloadURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadURL not implemented")
}
func (UnimplementedFilesServer) UploadURL(context.Context, *UploadURLRequest) (*UploadURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadURL not implemented")
}
func (UnimplementedFilesServer) Copy(context.Context, *CopyRequest) (*CopyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Copy not implemented")
}
func (UnimplementedFilesServer) Move(context.Context, *MoveRequest) (*MoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Move not implemented")
}
func (UnimplementedFilesServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedFilesServer) mustEmbedUnimplementedFilesServer() {}

// UnsafeFilesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilesServer will
// result in compilation errors.
type UnsafeFilesServer interface {
	mustEmbedUnimplementedFilesServer()
}

func RegisterFilesServer(s grpc.ServiceRegistrar, srv FilesServer) {
	s.RegisterService(&_Files_serviceDesc, srv)
}

func _Files_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Files/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Files_GetListStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetListStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FilesServer).GetListStream(m, &filesGetListStreamServer{stream})
}

type Files_GetListStreamServer interface {
	Send(*Stats) error
	grpc.ServerStream
}

type filesGetListStreamServer struct {
	grpc.ServerStream
}

func (x *filesGetListStreamServer) Send(m *Stats) error {
	return x.ServerStream.SendMsg(m)
}

func _Files_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Files/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Files_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Files/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).GetStats(ctx, req.(*StatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Files_StatsSession_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FilesServer).StatsSession(&filesStatsSessionServer{stream})
}

type Files_StatsSessionServer interface {
	Send(*Stats) error
	Recv() (*StatsRequest, error)
	grpc.ServerStream
}

type filesStatsSessionServer struct {
	grpc.ServerStream
}

func (x *filesStatsSessionServer) Send(m *Stats) error {
	return x.ServerStream.SendMsg(m)
}

func (x *filesStatsSessionServer) Recv() (*StatsRequest, error) {
	m := new(StatsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Files_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Files/GetMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).GetMeta(ctx, req.(*GetMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Files_SetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).SetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Files/SetMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).SetMeta(ctx, req.(*SetMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Files_DownloadURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).DownloadURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Files/DownloadURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).DownloadURL(ctx, req.(*DownloadURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Files_UploadURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).UploadURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Files/UploadURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).UploadURL(ctx, req.(*UploadURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Files_Copy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).Copy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Files/Copy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).Copy(ctx, req.(*CopyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Files_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Files/Move",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).Move(ctx, req.(*MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Files_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Files/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Files_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Files",
	HandlerType: (*FilesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Files_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Files_Create_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _Files_GetStats_Handler,
		},
		{
			MethodName: "GetMeta",
			Handler:    _Files_GetMeta_Handler,
		},
		{
			MethodName: "SetMeta",
			Handler:    _Files_SetMeta_Handler,
		},
		{
			MethodName: "DownloadURL",
			Handler:    _Files_DownloadURL_Handler,
		},
		{
			MethodName: "UploadURL",
			Handler:    _Files_UploadURL_Handler,
		},
		{
			MethodName: "Copy",
			Handler:    _Files_Copy_Handler,
		},
		{
			MethodName: "Move",
			Handler:    _Files_Move_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Files_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetListStream",
			Handler:       _Files_GetListStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StatsSession",
			Handler:       _Files_StatsSession_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ome.proto",
}

// CSRClient is the client API for CSR service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CSRClient interface {
	SignCertificate(ctx context.Context, in *SignCertificateRequest, opts ...grpc.CallOption) (*SignCertificateResponse, error)
}

type cSRClient struct {
	cc grpc.ClientConnInterface
}

func NewCSRClient(cc grpc.ClientConnInterface) CSRClient {
	return &cSRClient{cc}
}

func (c *cSRClient) SignCertificate(ctx context.Context, in *SignCertificateRequest, opts ...grpc.CallOption) (*SignCertificateResponse, error) {
	out := new(SignCertificateResponse)
	err := c.cc.Invoke(ctx, "/CSR/SignCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CSRServer is the server API for CSR service.
// All implementations must embed UnimplementedCSRServer
// for forward compatibility
type CSRServer interface {
	SignCertificate(context.Context, *SignCertificateRequest) (*SignCertificateResponse, error)
	mustEmbedUnimplementedCSRServer()
}

// UnimplementedCSRServer must be embedded to have forward compatible implementations.
type UnimplementedCSRServer struct {
}

func (UnimplementedCSRServer) SignCertificate(context.Context, *SignCertificateRequest) (*SignCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignCertificate not implemented")
}
func (UnimplementedCSRServer) mustEmbedUnimplementedCSRServer() {}

// UnsafeCSRServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CSRServer will
// result in compilation errors.
type UnsafeCSRServer interface {
	mustEmbedUnimplementedCSRServer()
}

func RegisterCSRServer(s grpc.ServiceRegistrar, srv CSRServer) {
	s.RegisterService(&_CSR_serviceDesc, srv)
}

func _CSR_SignCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSRServer).SignCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CSR/SignCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSRServer).SignCertificate(ctx, req.(*SignCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CSR_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CSR",
	HandlerType: (*CSRServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignCertificate",
			Handler:    _CSR_SignCertificate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ome.proto",
}

// RegistryClient is the client API for Registry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegistryClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Deregister(ctx context.Context, in *DeregisterRequest, opts ...grpc.CallOption) (*DeregisterResponse, error)
	List(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	Listen(ctx context.Context, opts ...grpc.CallOption) (Registry_ListenClient, error)
}

type registryClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistryClient(cc grpc.ClientConnInterface) RegistryClient {
	return &registryClient{cc}
}

func (c *registryClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/Registry/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) Deregister(ctx context.Context, in *DeregisterRequest, opts ...grpc.CallOption) (*DeregisterResponse, error) {
	out := new(DeregisterResponse)
	err := c.cc.Invoke(ctx, "/Registry/Deregister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) List(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error) {
	out := new(ListServicesResponse)
	err := c.cc.Invoke(ctx, "/Registry/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/Registry/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/Registry/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) Listen(ctx context.Context, opts ...grpc.CallOption) (Registry_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Registry_serviceDesc.Streams[0], "/Registry/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &registryListenClient{stream}
	return x, nil
}

type Registry_ListenClient interface {
	Send(*RegistryEvent) error
	Recv() (*RegistryEvent, error)
	grpc.ClientStream
}

type registryListenClient struct {
	grpc.ClientStream
}

func (x *registryListenClient) Send(m *RegistryEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *registryListenClient) Recv() (*RegistryEvent, error) {
	m := new(RegistryEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RegistryServer is the server API for Registry service.
// All implementations must embed UnimplementedRegistryServer
// for forward compatibility
type RegistryServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Deregister(context.Context, *DeregisterRequest) (*DeregisterResponse, error)
	List(context.Context, *ListServicesRequest) (*ListServicesResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	Listen(Registry_ListenServer) error
	mustEmbedUnimplementedRegistryServer()
}

// UnimplementedRegistryServer must be embedded to have forward compatible implementations.
type UnimplementedRegistryServer struct {
}

func (UnimplementedRegistryServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedRegistryServer) Deregister(context.Context, *DeregisterRequest) (*DeregisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deregister not implemented")
}
func (UnimplementedRegistryServer) List(context.Context, *ListServicesRequest) (*ListServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedRegistryServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRegistryServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedRegistryServer) Listen(Registry_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedRegistryServer) mustEmbedUnimplementedRegistryServer() {}

// UnsafeRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistryServer will
// result in compilation errors.
type UnsafeRegistryServer interface {
	mustEmbedUnimplementedRegistryServer()
}

func RegisterRegistryServer(s grpc.ServiceRegistrar, srv RegistryServer) {
	s.RegisterService(&_Registry_serviceDesc, srv)
}

func _Registry_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Registry/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_Deregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeregisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).Deregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Registry/Deregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).Deregister(ctx, req.(*DeregisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Registry/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).List(ctx, req.(*ListServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Registry/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Registry/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RegistryServer).Listen(&registryListenServer{stream})
}

type Registry_ListenServer interface {
	Send(*RegistryEvent) error
	Recv() (*RegistryEvent, error)
	grpc.ServerStream
}

type registryListenServer struct {
	grpc.ServerStream
}

func (x *registryListenServer) Send(m *RegistryEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *registryListenServer) Recv() (*RegistryEvent, error) {
	m := new(RegistryEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Registry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Registry",
	HandlerType: (*RegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Registry_Register_Handler,
		},
		{
			MethodName: "Deregister",
			Handler:    _Registry_Deregister_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Registry_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Registry_Get_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Registry_Search_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Listen",
			Handler:       _Registry_Listen_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ome.proto",
}

// UsersServiceClient is the client API for UsersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersServiceClient interface {
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error)
	GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error)
	StreamSubGroups(ctx context.Context, in *StreamSubGroupsRequest, opts ...grpc.CallOption) (UsersService_StreamSubGroupsClient, error)
	ListSubGroup(ctx context.Context, in *ListSubGroupRequest, opts ...grpc.CallOption) (*ListSubGroupResponse, error)
	DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupResponse, error)
	AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResponse, error)
	MoveUser(ctx context.Context, in *MoveUserRequest, opts ...grpc.CallOption) (*MoveUserResponse, error)
	GetUserStream(ctx context.Context, in *GetUserStreamRequest, opts ...grpc.CallOption) (UsersService_GetUserStreamClient, error)
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	DeleteUserSession(ctx context.Context, opts ...grpc.CallOption) (UsersService_DeleteUserSessionClient, error)
}

type usersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersServiceClient(cc grpc.ClientConnInterface) UsersServiceClient {
	return &usersServiceClient{cc}
}

func (c *usersServiceClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error) {
	out := new(CreateGroupResponse)
	err := c.cc.Invoke(ctx, "/UsersService/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error) {
	out := new(GetGroupResponse)
	err := c.cc.Invoke(ctx, "/UsersService/GetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) StreamSubGroups(ctx context.Context, in *StreamSubGroupsRequest, opts ...grpc.CallOption) (UsersService_StreamSubGroupsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UsersService_serviceDesc.Streams[0], "/UsersService/StreamSubGroups", opts...)
	if err != nil {
		return nil, err
	}
	x := &usersServiceStreamSubGroupsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UsersService_StreamSubGroupsClient interface {
	Recv() (*Group, error)
	grpc.ClientStream
}

type usersServiceStreamSubGroupsClient struct {
	grpc.ClientStream
}

func (x *usersServiceStreamSubGroupsClient) Recv() (*Group, error) {
	m := new(Group)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *usersServiceClient) ListSubGroup(ctx context.Context, in *ListSubGroupRequest, opts ...grpc.CallOption) (*ListSubGroupResponse, error) {
	out := new(ListSubGroupResponse)
	err := c.cc.Invoke(ctx, "/UsersService/ListSubGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupResponse, error) {
	out := new(DeleteGroupResponse)
	err := c.cc.Invoke(ctx, "/UsersService/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResponse, error) {
	out := new(AddUserResponse)
	err := c.cc.Invoke(ctx, "/UsersService/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) MoveUser(ctx context.Context, in *MoveUserRequest, opts ...grpc.CallOption) (*MoveUserResponse, error) {
	out := new(MoveUserResponse)
	err := c.cc.Invoke(ctx, "/UsersService/MoveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetUserStream(ctx context.Context, in *GetUserStreamRequest, opts ...grpc.CallOption) (UsersService_GetUserStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UsersService_serviceDesc.Streams[1], "/UsersService/GetUserStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &usersServiceGetUserStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UsersService_GetUserStreamClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type usersServiceGetUserStreamClient struct {
	grpc.ClientStream
}

func (x *usersServiceGetUserStreamClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *usersServiceClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, "/UsersService/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, "/UsersService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) DeleteUserSession(ctx context.Context, opts ...grpc.CallOption) (UsersService_DeleteUserSessionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UsersService_serviceDesc.Streams[2], "/UsersService/DeleteUserSession", opts...)
	if err != nil {
		return nil, err
	}
	x := &usersServiceDeleteUserSessionClient{stream}
	return x, nil
}

type UsersService_DeleteUserSessionClient interface {
	Send(*User) error
	Recv() (*User, error)
	grpc.ClientStream
}

type usersServiceDeleteUserSessionClient struct {
	grpc.ClientStream
}

func (x *usersServiceDeleteUserSessionClient) Send(m *User) error {
	return x.ClientStream.SendMsg(m)
}

func (x *usersServiceDeleteUserSessionClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UsersServiceServer is the server API for UsersService service.
// All implementations must embed UnimplementedUsersServiceServer
// for forward compatibility
type UsersServiceServer interface {
	CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error)
	GetGroup(context.Context, *GetGroupRequest) (*GetGroupResponse, error)
	StreamSubGroups(*StreamSubGroupsRequest, UsersService_StreamSubGroupsServer) error
	ListSubGroup(context.Context, *ListSubGroupRequest) (*ListSubGroupResponse, error)
	DeleteGroup(context.Context, *DeleteGroupRequest) (*DeleteGroupResponse, error)
	AddUser(context.Context, *AddUserRequest) (*AddUserResponse, error)
	MoveUser(context.Context, *MoveUserRequest) (*MoveUserResponse, error)
	GetUserStream(*GetUserStreamRequest, UsersService_GetUserStreamServer) error
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	DeleteUserSession(UsersService_DeleteUserSessionServer) error
	mustEmbedUnimplementedUsersServiceServer()
}

// UnimplementedUsersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUsersServiceServer struct {
}

func (UnimplementedUsersServiceServer) CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedUsersServiceServer) GetGroup(context.Context, *GetGroupRequest) (*GetGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedUsersServiceServer) StreamSubGroups(*StreamSubGroupsRequest, UsersService_StreamSubGroupsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamSubGroups not implemented")
}
func (UnimplementedUsersServiceServer) ListSubGroup(context.Context, *ListSubGroupRequest) (*ListSubGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubGroup not implemented")
}
func (UnimplementedUsersServiceServer) DeleteGroup(context.Context, *DeleteGroupRequest) (*DeleteGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedUsersServiceServer) AddUser(context.Context, *AddUserRequest) (*AddUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedUsersServiceServer) MoveUser(context.Context, *MoveUserRequest) (*MoveUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveUser not implemented")
}
func (UnimplementedUsersServiceServer) GetUserStream(*GetUserStreamRequest, UsersService_GetUserStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserStream not implemented")
}
func (UnimplementedUsersServiceServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedUsersServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUsersServiceServer) DeleteUserSession(UsersService_DeleteUserSessionServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteUserSession not implemented")
}
func (UnimplementedUsersServiceServer) mustEmbedUnimplementedUsersServiceServer() {}

// UnsafeUsersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServiceServer will
// result in compilation errors.
type UnsafeUsersServiceServer interface {
	mustEmbedUnimplementedUsersServiceServer()
}

func RegisterUsersServiceServer(s grpc.ServiceRegistrar, srv UsersServiceServer) {
	s.RegisterService(&_UsersService_serviceDesc, srv)
}

func _UsersService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CreateGroup(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetGroup(ctx, req.(*GetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_StreamSubGroups_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamSubGroupsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UsersServiceServer).StreamSubGroups(m, &usersServiceStreamSubGroupsServer{stream})
}

type UsersService_StreamSubGroupsServer interface {
	Send(*Group) error
	grpc.ServerStream
}

type usersServiceStreamSubGroupsServer struct {
	grpc.ServerStream
}

func (x *usersServiceStreamSubGroupsServer) Send(m *Group) error {
	return x.ServerStream.SendMsg(m)
}

func _UsersService_ListSubGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).ListSubGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/ListSubGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).ListSubGroup(ctx, req.(*ListSubGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).DeleteGroup(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).AddUser(ctx, req.(*AddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_MoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).MoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/MoveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).MoveUser(ctx, req.(*MoveUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetUserStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetUserStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UsersServiceServer).GetUserStream(m, &usersServiceGetUserStreamServer{stream})
}

type UsersService_GetUserStreamServer interface {
	Send(*User) error
	grpc.ServerStream
}

type usersServiceGetUserStreamServer struct {
	grpc.ServerStream
}

func (x *usersServiceGetUserStreamServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func _UsersService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_DeleteUserSession_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UsersServiceServer).DeleteUserSession(&usersServiceDeleteUserSessionServer{stream})
}

type UsersService_DeleteUserSessionServer interface {
	Send(*User) error
	Recv() (*User, error)
	grpc.ServerStream
}

type usersServiceDeleteUserSessionServer struct {
	grpc.ServerStream
}

func (x *usersServiceDeleteUserSessionServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func (x *usersServiceDeleteUserSessionServer) Recv() (*User, error) {
	m := new(User)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _UsersService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "UsersService",
	HandlerType: (*UsersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGroup",
			Handler:    _UsersService_CreateGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _UsersService_GetGroup_Handler,
		},
		{
			MethodName: "ListSubGroup",
			Handler:    _UsersService_ListSubGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _UsersService_DeleteGroup_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _UsersService_AddUser_Handler,
		},
		{
			MethodName: "MoveUser",
			Handler:    _UsersService_MoveUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _UsersService_ListUsers_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UsersService_DeleteUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamSubGroups",
			Handler:       _UsersService_StreamSubGroups_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetUserStream",
			Handler:       _UsersService_GetUserStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteUserSession",
			Handler:       _UsersService_DeleteUserSession_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ome.proto",
}
